name: build

on:
  push:
    branches-ignore:
      - 'dependabot/**'

jobs:

  build:
    if: "!contains(github.event.head_commit.message, 'skip ci')"
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        architecture: [linux-arm-v7, linux-arm64, linux-amd64]
    outputs:
      version: ${{ steps.prep.outputs.version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Shellcheck
        run: |
          shellcheck --version
          if [[ -d ./root ]]; then
            find "./root" -type f -print -exec shellcheck {} \;
          else
            true
          fi

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
        with:
          install: true
          version: latest
          driver-opts: image=moby/buildkit:master

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.PERSONAL_TOKEN }}

      - name: Prepare
        id: prep
        run: |
          ARCHITECTURE=${{ matrix.architecture }}
          VERSION=$(grep "^VERSION=.*$" ./VERSION | sed s/VERSION=//)
          BUILD_ARGS=$(paste -sd, ./VERSION)
          echo ::set-output name=created::$(date -u +'%Y-%m-%dT%H:%M:%SZ')
          echo ::set-output name=title::${GITHUB_REPOSITORY//docker-/}:${GITHUB_REF//refs\/heads\//}
          echo ::set-output name=revision::${GITHUB_SHA}
          echo ::set-output name=source::${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/tree/${GITHUB_REF//refs\/heads\//}
          echo ::set-output name=vendor::${{ github.repository_owner }}
          echo ::set-output name=url::${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/blob/master/README.md
          echo ::set-output name=platform::${ARCHITECTURE//-/\/}
          echo ::set-output name=cache::${GITHUB_REPOSITORY//docker-/}:${GITHUB_REF//refs\/heads\//}-cache-${{ matrix.architecture }}
          echo ::set-output name=tag::${GITHUB_REPOSITORY//docker-/}:${GITHUB_REF//refs\/heads\//}-${GITHUB_SHA:0:7}-${GITHUB_RUN_NUMBER}-${{ matrix.architecture }}
          echo ::set-output name=version::${VERSION}
          echo ::set-output name=build-args::${BUILD_ARGS}

      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          push: true
          platforms: ${{ steps.prep.outputs.platform }}
          file: ./${{ matrix.architecture }}.Dockerfile
          cache-from: ${{ steps.prep.outputs.cache }}
          cache-to: ${{ steps.prep.outputs.cache }}
          tags: |
            ${{ steps.prep.outputs.tag }}
            ghcr.io/${{ steps.prep.outputs.tag }}
          labels: |
            org.opencontainers.image.created=${{ steps.prep.outputs.created }}
            org.opencontainers.image.title=${{ steps.prep.outputs.title }}
            org.opencontainers.image.revision=${{ steps.prep.outputs.revision }}
            org.opencontainers.image.source=${{ steps.prep.outputs.source }}
            org.opencontainers.image.vendor=${{ steps.prep.outputs.vendor }}
            org.opencontainers.image.url=${{ steps.prep.outputs.url }}
            org.opencontainers.image.version=${{ steps.prep.outputs.version }}
          build-args: ${{ steps.prep.outputs.build-args }}

      - name: Configure Dive
        run: |
          echo "rules:" > ${{ github.workspace }}/.dive.yml
          echo "  lowestEfficiency: 0.95" >> ${{ github.workspace }}/.dive.yml
          echo "  highestWastedBytes: 20MB" >> ${{ github.workspace }}/.dive.yml
          echo "  highestUserWastedPercent: 0.20" >> ${{ github.workspace }}/.dive.yml

      - name: Dive Analysis
        uses: yuichielectric/dive-action@0.0.4
        with:
          image: "${{ steps.prep.outputs.tag }}"
          config-file: ${{ github.workspace }}/.dive.yml

      - name: Run tests
        run: |
          bash update.sh tests ${{ steps.prep.outputs.tag }}

  publish:
    runs-on: ubuntu-20.04
    needs: [build]
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.PERSONAL_TOKEN }}

      - name: Create manifests for DockerHub
        env:
          DOCKER_CLI_EXPERIMENTAL: enabled
        run: |
          IMAGE=${GITHUB_REPOSITORY//docker-/}
          TAG=${GITHUB_REF//refs\/heads\//}
          SOURCE=${IMAGE}:${TAG}-${GITHUB_SHA:0:7}-${GITHUB_RUN_NUMBER}
          docker manifest create ${IMAGE}:${TAG}                                    --amend ${SOURCE}-linux-amd64 --amend ${SOURCE}-linux-arm-v7 --amend ${SOURCE}-linux-arm64 && docker manifest push ${IMAGE}:${TAG}
          docker manifest create ${IMAGE}:${TAG}-${{ needs.build.outputs.version }} --amend ${SOURCE}-linux-amd64 --amend ${SOURCE}-linux-arm-v7 --amend ${SOURCE}-linux-arm64 && docker manifest push ${IMAGE}:${TAG}-${{ needs.build.outputs.version }}
          docker manifest create ${IMAGE}:${TAG}-${GITHUB_SHA:0:7}                  --amend ${SOURCE}-linux-amd64 --amend ${SOURCE}-linux-arm-v7 --amend ${SOURCE}-linux-arm64 && docker manifest push ${IMAGE}:${TAG}-${GITHUB_SHA:0:7}
          if [[ ${GITHUB_REF//refs\/heads\//} == release ]]; then
          docker manifest create ${IMAGE}:latest                                    --amend ${SOURCE}-linux-amd64 --amend ${SOURCE}-linux-arm-v7 --amend ${SOURCE}-linux-arm64 && docker manifest push ${IMAGE}:latest
          fi

      - name: Create manifests for GitHub Container Registry
        env:
          DOCKER_CLI_EXPERIMENTAL: enabled
        run: |
          IMAGE=ghcr.io/${GITHUB_REPOSITORY//docker-/}
          TAG=${GITHUB_REF//refs\/heads\//}
          SOURCE=${IMAGE}:${TAG}-${GITHUB_SHA:0:7}-${GITHUB_RUN_NUMBER}
          docker manifest create ${IMAGE}:${TAG}                                    --amend ${SOURCE}-linux-amd64 --amend ${SOURCE}-linux-arm-v7 --amend ${SOURCE}-linux-arm64 && docker manifest push ${IMAGE}:${TAG}
          docker manifest create ${IMAGE}:${TAG}-${{ needs.build.outputs.version }} --amend ${SOURCE}-linux-amd64 --amend ${SOURCE}-linux-arm-v7 --amend ${SOURCE}-linux-arm64 && docker manifest push ${IMAGE}:${TAG}-${{ needs.build.outputs.version }}
          docker manifest create ${IMAGE}:${TAG}-${GITHUB_SHA:0:7}                  --amend ${SOURCE}-linux-amd64 --amend ${SOURCE}-linux-arm-v7 --amend ${SOURCE}-linux-arm64 && docker manifest push ${IMAGE}:${TAG}-${GITHUB_SHA:0:7}
          if [[ ${GITHUB_REF//refs\/heads\//} == release ]]; then
          docker manifest create ${IMAGE}:latest                                    --amend ${SOURCE}-linux-amd64 --amend ${SOURCE}-linux-arm-v7 --amend ${SOURCE}-linux-arm64 && docker manifest push ${IMAGE}:latest
          fi

  notify:
    runs-on: ubuntu-20.04
    if: ${{ always() }}
    needs: [build, publish]
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Take screenshot
        if: "contains(needs.publish.result, 'success')"
        run: |
          if [[ -f puppeteer.js ]]; then
            bash update.sh screenshot ${GITHUB_REPOSITORY//docker-/}:${GITHUB_REF//refs\/heads\//}-${GITHUB_SHA:0:7}
          fi

      - name: Send discord notification
        if: "!contains(github.event.head_commit.message, 'skip ci')"
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
          GITHUB_OWNER: ${{ github.repository_owner }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VERSION_FIELD: ${{ needs.build.outputs.version }}
          STATUS: ${{ needs.publish.result }}
        run: |
          curl -u "${GITHUB_OWNER}:${GITHUB_TOKEN}" -fsSL https://gist.githubusercontent.com/${GITHUB_OWNER}/3d98159d47e0bf5eccbff221f1288472/raw/discord-action-notify.sh > discord-action-notify.sh
          bash discord-action-notify.sh
